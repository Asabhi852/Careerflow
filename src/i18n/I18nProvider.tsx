'use client';

import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';

type LanguageCode = 'en' | 'hi' | 'te' | 'ta' | 'kn';

type Translations = Record<string, string>;

export const LANGUAGE_NAMES: Record<LanguageCode, string> = {
  en: 'English',
  hi: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)',
  te: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)',
  ta: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)',
  kn: '‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)',
};

const DICTS: Record<LanguageCode, Translations> = {
  en: {
    nav_jobs: 'Jobs',
    nav_posts: 'Posts',
    nav_ai_match: 'AI Match',
    nav_candidates: 'Candidates',
    chatbot_welcome: "üëã Hi! I'm your AI career assistant. How can I help you today?",
    chatbot_placeholder: 'Type your message...',
    chatbot_typing: 'Typing...',
    chatbot_online: 'Online now',
    chatbot_select_language: 'Select Language',
  },
  hi: {
    nav_jobs: '‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡§æ‡§Ç',
    nav_posts: '‡§™‡•ã‡§∏‡•ç‡§ü',
    nav_ai_match: '‡§è‡§Ü‡§à ‡§Æ‡§ø‡§≤‡§æ‡§®',
    nav_candidates: '‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶‡§µ‡§æ‡§∞',
    chatbot_welcome: 'üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§è‡§Ü‡§à ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?',
    chatbot_placeholder: '‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç...',
    chatbot_typing: '‡§≤‡§ø‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    chatbot_online: '‡§Ö‡§≠‡•Ä ‡§ë‡§®‡§≤‡§æ‡§á‡§®',
    chatbot_select_language: '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
  },
  te: {
    nav_jobs: '‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤‡±Å',
    nav_posts: '‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±Å‡∞≤‡±Å',
    nav_ai_match: '‡∞è‡∞ê ‡∞Æ‡±ç‡∞Ø‡∞æ‡∞ö‡±ç',
    nav_candidates: '‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡±Å‡∞≤‡±Å',
    chatbot_welcome: 'üëã ‡∞π‡∞≤‡±ã! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä AI ‡∞ï‡±Ü‡∞∞‡±Ä‡∞∞‡±ç ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å. ‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?',
    chatbot_placeholder: '‡∞Æ‡±Ä ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...',
    chatbot_typing: '‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å...',
    chatbot_online: '‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Ü‡∞®‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç',
    chatbot_select_language: '‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
  },
  ta: {
    nav_jobs: '‡Æµ‡Øá‡Æ≤‡Øà‡Æï‡Æ≥‡Øç',
    nav_posts: '‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç',
    nav_ai_match: '‡Æè‡Æê ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç',
    nav_candidates: '‡Æµ‡Øá‡Æü‡Øç‡Æ™‡Ææ‡Æ≥‡Æ∞‡Øç‡Æï‡Æ≥‡Øç',
    chatbot_welcome: 'üëã ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç AI ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ‡Æ≤‡Ææ‡ÆÆ‡Øç?',
    chatbot_placeholder: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø‡ÆØ‡Øà ‡Æ§‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç...',
    chatbot_typing: '‡Æ§‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ...',
    chatbot_online: '‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡ÆÜ‡Æ©‡Øç‡Æ≤‡Øà‡Æ©‡Æø‡Æ≤‡Øç',
    chatbot_select_language: '‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
  },
  kn: {
    nav_jobs: '‡≤â‡≤¶‡≥ç‡≤Ø‡≥ã‡≤ó‡≤ó‡≤≥‡≥Å',
    nav_posts: '‡≤™‡≥ã‡≤∏‡≥ç‡≤ü‡≥ç‚Äå‡≤ó‡≤≥‡≥Å',
    nav_ai_match: '‡≤é‡≤ê ‡≤π‡≥ä‡≤Ç‡≤¶‡≤æ‡≤£‡≤ø‡≤ï‡≥Ü',
    nav_candidates: '‡≤Ö‡≤≠‡≥ç‡≤Ø‡≤∞‡≥ç‡≤•‡≤ø‡≤ó‡≤≥‡≥Å',
    chatbot_welcome: 'üëã ‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ AI ‡≤µ‡≥É‡≤§‡≥ç‡≤§‡≤ø ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï. ‡≤á‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?',
    chatbot_placeholder: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø...',
    chatbot_typing: '‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...',
    chatbot_online: '‡≤à‡≤ó ‡≤Ü‡≤®‡≥ç‚Äå‡≤≤‡≥à‡≤®‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø‡≤¶‡≥Ü',
    chatbot_select_language: '‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø',
  },
};

type I18nContextValue = {
  language: LanguageCode;
  setLanguage: (lang: LanguageCode) => void;
  t: (key: string, fallback?: string) => string;
};

const I18nContext = createContext<I18nContextValue | null>(null);

export function I18nProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguageState] = useState<LanguageCode>('en');

  useEffect(() => {
    const saved = typeof window !== 'undefined' ? (localStorage.getItem('app_language') as LanguageCode | null) : null;
    if (saved) setLanguageState(saved);
  }, []);

  const setLanguage = (lang: LanguageCode) => {
    setLanguageState(lang);
    if (typeof window !== 'undefined') localStorage.setItem('app_language', lang);
  };

  const t = (key: string, fallback?: string) => {
    const dict = DICTS[language] || DICTS.en;
    return dict[key] ?? fallback ?? key;
  };

  const value = useMemo(() => ({ language, setLanguage, t }), [language]);

  return <I18nContext.Provider value={value}>{children}</I18nContext.Provider>;
}

export function useI18n() {
  const ctx = useContext(I18nContext);
  if (!ctx) throw new Error('useI18n must be used within I18nProvider');
  return ctx;
}


