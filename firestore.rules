rules_version = '2';

// Firestore Database Rules
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Posts collection - Public read, authenticated write
    match /posts/{postId} {
      allow read: if true; // Anyone can read posts
      allow create: if request.auth != null; // Only authenticated users can create
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId; // Only author can update/delete
    }
    
    // Users collection - Private
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId; // Users can read their own data
      allow write: if request.auth != null && request.auth.uid == userId; // Users can write their own data
      
      // Nested collections in users
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /messages/{messageId} {
        // Receiver can read their messages
        allow read: if request.auth != null && request.auth.uid == userId;
        // Allow owner to manage their messages
        allow update, delete: if request.auth != null && request.auth.uid == userId;
        // Allow writes in two cases:
        // 1) Sender writes a copy to their own messages subcollection (outbox)
        // 2) Sender writes to receiver's messages subcollection (inbox)
        allow write: if request.auth != null && (
                        (
                          // Sender writing to their own path
                          request.auth.uid == userId &&
                          request.resource.data.senderId == request.auth.uid
                        ) || (
                          // Sender writing to receiver's path
                          request.resource.data.senderId == request.auth.uid &&
                          request.resource.data.receiverId == userId
                        )
                      );
      }
    }
    
    // Public profiles - Public read, owner write
    match /public_profiles/{userId} {
      allow read: if true; // Anyone can read public profiles
      allow write: if request.auth != null && request.auth.uid == userId; // Only owner can write
    }
    
    // Job postings - Public read, authenticated write
    match /job_postings/{jobId} {
      allow read: if true; // Anyone can read job postings
      allow create: if request.auth != null; // Authenticated users can create
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.posterId; // Only poster can update/delete
    }
    
    // Applications - Private
    match /applications/{applicationId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.applicantId || 
                   request.auth.uid == resource.data.posterId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.applicantId;
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.applicantId || 
                     request.auth.uid == resource.data.posterId);
      allow delete: if request.auth != null && request.auth.uid == resource.data.applicantId;
    }
    
    // Conversations - Private between participants
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null;
    }
  }
}

// Firebase Storage Rules
service firebase.storage {
  match /b/{bucket}/o {
    // Resumes
    match /resumes/{userId}/{fileName} {
      allow read: if true; // Public read for resumes
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Profile pictures
    match /profile-pictures/{userId}/{fileName} {
      allow read: if true; // Public read for profile pictures
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Certificates
    match /certificates/{userId}/{fileName} {
      allow read: if true; // Public read for certificates
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Videos
    match /videos/{userId}/{fileName} {
      allow read: if true; // Public read for videos
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // General uploads
    match /uploads/{userId}/{fileName} {
      allow read: if true; // Public read
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
